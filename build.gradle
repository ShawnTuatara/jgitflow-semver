buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
        classpath 'com.github.amkay:gradle-gitflow:0.2.0'
        classpath 'net.sf.proguard:proguard-gradle:5.2.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
    }
}

apply plugin: 'java'
apply plugin: "maven-publish"
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'
apply plugin: 'com.github.amkay.gitflow'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco'
apply plugin: 'maven'

mainClassName = "com.quicksign.jgitflowsemver.JGitFlowSemver"
sourceCompatibility = 1.5
project.group = 'com.quicksign.jgitflow-semver'

repositories {
    mavenCentral()
    jcenter()
}

publishing {
    publications {
        mainPublication(MavenPublication) {
            from components.java

            groupId project.group
            artifactId 'jgitflow-semver'
            version project.version

            artifact sourceJar
            artifact("${project.buildDir}/libs/${project.name}-${version}-min.jar") {
                classifier "min"
                extension "jar"
            }
            artifact("${project.buildDir}/${project.name}-${version}.sh") {
                classifier "script"
                extension "sh"
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['mainPublication']
    pkg {
        repo = 'jgitflow-semver'
        name = 'jgitflow-semver'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/cedricvidal/jgitflow-semver.git'

        version {
            name = project.version
            desc = 'JGitFlow SemVer'
            //released  = new Date()
        }
    }
}

configurations {
    compile.exclude group: 'commons-logging'
    compile.exclude group: 'org.apache.servicemix.bundles'
    compile.exclude group: 'com.jcraft'
    compile.exclude module: 'httpclient'
    compile.exclude module: 'JavaEWAH'
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'external.atlassian.jgitflow:jgit-flow-core:1.0-m5.1'
    testCompile "org.mockito:mockito-core:1.10.19"
    compile 'com.github.zafarkhaja:java-semver:0.9.0'
    compile 'org.eclipse.jgit:org.eclipse.jgit:3.7.1.201504261725-r'
    compile 'org.slf4j:jcl-over-slf4j:1.7.12'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.slf4j:slf4j-simple:1.7.12'
    compile 'com.google.guava:guava:11.0.2'
    compile 'commons-cli:commons-cli:1.3.1'
}

jar {
    manifest {
        attributes("Implementation-Title": "JGitFlow SemVer", "Implementation-Version": version)
    }
}

task proguard(type: proguard.gradle.ProGuardTask, dependsOn: 'shadowJar') {
    configuration 'applications.pro'
    injars "${project.buildDir}/libs/${project.name}-${version}-all.jar"
    outjars "${project.buildDir}/libs/${project.name}-${version}-min.jar"

    keep "public class $mainClassName"
}

task script(dependsOn: 'proguard') {
    ext.destFile = "${project.buildDir}/${project.name}-${version}.sh"
    ext.stub = 'src/script/stub.sh'
    ext.jarFile = "${project.buildDir}/libs/${project.name}-${version}-min.jar"
    inputs.file jarFile
    outputs.file destFile
    doLast {
        ant.concat(destfile: destFile, binary: true) {
            fileset(file: stub)
            fileset(file: jarFile)
        }
        ant.chmod(file: destFile, perm: "a+x")
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

shadowJar {
    exclude 'META-INF/**/pom.xml'
    exclude 'META-INF/**/pom.properties'
    exclude '**/LICENSE*'
    exclude '**/NOTICE*'
    exclude 'plugin.properties'
    exclude '**/*.html'
}

/**
 * Test coverage
 */
jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport
